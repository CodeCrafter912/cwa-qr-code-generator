// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trace_location.proto

#include "trace_location.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace internal {
namespace pt {
constexpr QRCodePayload::QRCodePayload(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vendordata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , locationdata_(nullptr)
  , crowdnotifierdata_(nullptr)
  , version_(0u){}
struct QRCodePayloadDefaultTypeInternal {
  constexpr QRCodePayloadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QRCodePayloadDefaultTypeInternal() {}
  union {
    QRCodePayload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QRCodePayloadDefaultTypeInternal _QRCodePayload_default_instance_;
constexpr TraceLocation::TraceLocation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , starttimestamp_(PROTOBUF_ULONGLONG(0))
  , endtimestamp_(PROTOBUF_ULONGLONG(0))
  , version_(0u){}
struct TraceLocationDefaultTypeInternal {
  constexpr TraceLocationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TraceLocationDefaultTypeInternal() {}
  union {
    TraceLocation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TraceLocationDefaultTypeInternal _TraceLocation_default_instance_;
constexpr CrowdNotifierData::CrowdNotifierData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : publickey_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cryptographicseed_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(0u){}
struct CrowdNotifierDataDefaultTypeInternal {
  constexpr CrowdNotifierDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CrowdNotifierDataDefaultTypeInternal() {}
  union {
    CrowdNotifierData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CrowdNotifierDataDefaultTypeInternal _CrowdNotifierData_default_instance_;
constexpr CWALocationData::CWALocationData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_(0u)
  , type_(0)

  , defaultcheckinlengthinminutes_(0u){}
struct CWALocationDataDefaultTypeInternal {
  constexpr CWALocationDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CWALocationDataDefaultTypeInternal() {}
  union {
    CWALocationData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CWALocationDataDefaultTypeInternal _CWALocationData_default_instance_;
}  // namespace pt
}  // namespace internal
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_trace_5flocation_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_trace_5flocation_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_trace_5flocation_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_trace_5flocation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::internal::pt::QRCodePayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::internal::pt::QRCodePayload, version_),
  PROTOBUF_FIELD_OFFSET(::internal::pt::QRCodePayload, locationdata_),
  PROTOBUF_FIELD_OFFSET(::internal::pt::QRCodePayload, crowdnotifierdata_),
  PROTOBUF_FIELD_OFFSET(::internal::pt::QRCodePayload, vendordata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::internal::pt::TraceLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::internal::pt::TraceLocation, version_),
  PROTOBUF_FIELD_OFFSET(::internal::pt::TraceLocation, description_),
  PROTOBUF_FIELD_OFFSET(::internal::pt::TraceLocation, address_),
  PROTOBUF_FIELD_OFFSET(::internal::pt::TraceLocation, starttimestamp_),
  PROTOBUF_FIELD_OFFSET(::internal::pt::TraceLocation, endtimestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::internal::pt::CrowdNotifierData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::internal::pt::CrowdNotifierData, version_),
  PROTOBUF_FIELD_OFFSET(::internal::pt::CrowdNotifierData, publickey_),
  PROTOBUF_FIELD_OFFSET(::internal::pt::CrowdNotifierData, cryptographicseed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::internal::pt::CWALocationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::internal::pt::CWALocationData, version_),
  PROTOBUF_FIELD_OFFSET(::internal::pt::CWALocationData, type_),
  PROTOBUF_FIELD_OFFSET(::internal::pt::CWALocationData, defaultcheckinlengthinminutes_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::internal::pt::QRCodePayload)},
  { 9, -1, sizeof(::internal::pt::TraceLocation)},
  { 19, -1, sizeof(::internal::pt::CrowdNotifierData)},
  { 27, -1, sizeof(::internal::pt::CWALocationData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::internal::pt::_QRCodePayload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::internal::pt::_TraceLocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::internal::pt::_CrowdNotifierData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::internal::pt::_CWALocationData_default_instance_),
};

const char descriptor_table_protodef_trace_5flocation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024trace_location.proto\022\013internal.pt\"\241\001\n\r"
  "QRCodePayload\022\017\n\007version\030\001 \001(\r\0220\n\014locati"
  "onData\030\002 \001(\0132\032.internal.pt.TraceLocation"
  "\0229\n\021crowdNotifierData\030\003 \001(\0132\036.internal.p"
  "t.CrowdNotifierData\022\022\n\nvendorData\030\004 \001(\014\""
  "t\n\rTraceLocation\022\017\n\007version\030\001 \001(\r\022\023\n\013des"
  "cription\030\002 \001(\t\022\017\n\007address\030\003 \001(\t\022\026\n\016start"
  "Timestamp\030\005 \001(\004\022\024\n\014endTimestamp\030\006 \001(\004\"R\n"
  "\021CrowdNotifierData\022\017\n\007version\030\001 \001(\r\022\021\n\tp"
  "ublicKey\030\002 \001(\014\022\031\n\021cryptographicSeed\030\003 \001("
  "\014\"w\n\017CWALocationData\022\017\n\007version\030\001 \001(\r\022,\n"
  "\004type\030\002 \001(\0162\036.internal.pt.TraceLocationT"
  "ype\022%\n\035defaultCheckInLengthInMinutes\030\003 \001"
  "(\r*\241\004\n\021TraceLocationType\022\035\n\031LOCATION_TYP"
  "E_UNSPECIFIED\020\000\022!\n\035LOCATION_TYPE_PERMANE"
  "NT_OTHER\020\001\022!\n\035LOCATION_TYPE_TEMPORARY_OT"
  "HER\020\002\022\"\n\036LOCATION_TYPE_PERMANENT_RETAIL\020"
  "\003\022(\n$LOCATION_TYPE_PERMANENT_FOOD_SERVIC"
  "E\020\004\022!\n\035LOCATION_TYPE_PERMANENT_CRAFT\020\005\022%"
  "\n!LOCATION_TYPE_PERMANENT_WORKPLACE\020\006\0223\n"
  "/LOCATION_TYPE_PERMANENT_EDUCATIONAL_INS"
  "TITUTION\020\007\022+\n\'LOCATION_TYPE_PERMANENT_PU"
  "BLIC_BUILDING\020\010\022*\n&LOCATION_TYPE_TEMPORA"
  "RY_CULTURAL_EVENT\020\t\022)\n%LOCATION_TYPE_TEM"
  "PORARY_CLUB_ACTIVITY\020\n\022)\n%LOCATION_TYPE_"
  "TEMPORARY_PRIVATE_EVENT\020\013\022+\n\'LOCATION_TY"
  "PE_TEMPORARY_WORSHIP_SERVICE\020\014b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_trace_5flocation_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trace_5flocation_2eproto = {
  false, false, 1078, descriptor_table_protodef_trace_5flocation_2eproto, "trace_location.proto", 
  &descriptor_table_trace_5flocation_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_trace_5flocation_2eproto::offsets,
  file_level_metadata_trace_5flocation_2eproto, file_level_enum_descriptors_trace_5flocation_2eproto, file_level_service_descriptors_trace_5flocation_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_trace_5flocation_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trace_5flocation_2eproto);
  return descriptor_table_trace_5flocation_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_trace_5flocation_2eproto(&descriptor_table_trace_5flocation_2eproto);
namespace internal {
namespace pt {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TraceLocationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_trace_5flocation_2eproto);
  return file_level_enum_descriptors_trace_5flocation_2eproto[0];
}
bool TraceLocationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class QRCodePayload::_Internal {
 public:
  static const ::internal::pt::TraceLocation& locationdata(const QRCodePayload* msg);
  static const ::internal::pt::CrowdNotifierData& crowdnotifierdata(const QRCodePayload* msg);
};

const ::internal::pt::TraceLocation&
QRCodePayload::_Internal::locationdata(const QRCodePayload* msg) {
  return *msg->locationdata_;
}
const ::internal::pt::CrowdNotifierData&
QRCodePayload::_Internal::crowdnotifierdata(const QRCodePayload* msg) {
  return *msg->crowdnotifierdata_;
}
QRCodePayload::QRCodePayload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:internal.pt.QRCodePayload)
}
QRCodePayload::QRCodePayload(const QRCodePayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vendordata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_vendordata().empty()) {
    vendordata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vendordata(), 
      GetArena());
  }
  if (from._internal_has_locationdata()) {
    locationdata_ = new ::internal::pt::TraceLocation(*from.locationdata_);
  } else {
    locationdata_ = nullptr;
  }
  if (from._internal_has_crowdnotifierdata()) {
    crowdnotifierdata_ = new ::internal::pt::CrowdNotifierData(*from.crowdnotifierdata_);
  } else {
    crowdnotifierdata_ = nullptr;
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:internal.pt.QRCodePayload)
}

void QRCodePayload::SharedCtor() {
vendordata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&locationdata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&locationdata_)) + sizeof(version_));
}

QRCodePayload::~QRCodePayload() {
  // @@protoc_insertion_point(destructor:internal.pt.QRCodePayload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QRCodePayload::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  vendordata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete locationdata_;
  if (this != internal_default_instance()) delete crowdnotifierdata_;
}

void QRCodePayload::ArenaDtor(void* object) {
  QRCodePayload* _this = reinterpret_cast< QRCodePayload* >(object);
  (void)_this;
}
void QRCodePayload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QRCodePayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QRCodePayload::Clear() {
// @@protoc_insertion_point(message_clear_start:internal.pt.QRCodePayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vendordata_.ClearToEmpty();
  if (GetArena() == nullptr && locationdata_ != nullptr) {
    delete locationdata_;
  }
  locationdata_ = nullptr;
  if (GetArena() == nullptr && crowdnotifierdata_ != nullptr) {
    delete crowdnotifierdata_;
  }
  crowdnotifierdata_ = nullptr;
  version_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QRCodePayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .internal.pt.TraceLocation locationData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_locationdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .internal.pt.CrowdNotifierData crowdNotifierData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_crowdnotifierdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes vendorData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_vendordata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QRCodePayload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:internal.pt.QRCodePayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // .internal.pt.TraceLocation locationData = 2;
  if (this->has_locationdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::locationdata(this), target, stream);
  }

  // .internal.pt.CrowdNotifierData crowdNotifierData = 3;
  if (this->has_crowdnotifierdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::crowdnotifierdata(this), target, stream);
  }

  // bytes vendorData = 4;
  if (this->vendordata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_vendordata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:internal.pt.QRCodePayload)
  return target;
}

size_t QRCodePayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:internal.pt.QRCodePayload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes vendorData = 4;
  if (this->vendordata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_vendordata());
  }

  // .internal.pt.TraceLocation locationData = 2;
  if (this->has_locationdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *locationdata_);
  }

  // .internal.pt.CrowdNotifierData crowdNotifierData = 3;
  if (this->has_crowdnotifierdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *crowdnotifierdata_);
  }

  // uint32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QRCodePayload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:internal.pt.QRCodePayload)
  GOOGLE_DCHECK_NE(&from, this);
  const QRCodePayload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QRCodePayload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:internal.pt.QRCodePayload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:internal.pt.QRCodePayload)
    MergeFrom(*source);
  }
}

void QRCodePayload::MergeFrom(const QRCodePayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:internal.pt.QRCodePayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vendordata().size() > 0) {
    _internal_set_vendordata(from._internal_vendordata());
  }
  if (from.has_locationdata()) {
    _internal_mutable_locationdata()->::internal::pt::TraceLocation::MergeFrom(from._internal_locationdata());
  }
  if (from.has_crowdnotifierdata()) {
    _internal_mutable_crowdnotifierdata()->::internal::pt::CrowdNotifierData::MergeFrom(from._internal_crowdnotifierdata());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void QRCodePayload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:internal.pt.QRCodePayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QRCodePayload::CopyFrom(const QRCodePayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:internal.pt.QRCodePayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QRCodePayload::IsInitialized() const {
  return true;
}

void QRCodePayload::InternalSwap(QRCodePayload* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vendordata_.Swap(&other->vendordata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QRCodePayload, version_)
      + sizeof(QRCodePayload::version_)
      - PROTOBUF_FIELD_OFFSET(QRCodePayload, locationdata_)>(
          reinterpret_cast<char*>(&locationdata_),
          reinterpret_cast<char*>(&other->locationdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QRCodePayload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TraceLocation::_Internal {
 public:
};

TraceLocation::TraceLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:internal.pt.TraceLocation)
}
TraceLocation::TraceLocation(const TraceLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArena());
  }
  ::memcpy(&starttimestamp_, &from.starttimestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&starttimestamp_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:internal.pt.TraceLocation)
}

void TraceLocation::SharedCtor() {
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&starttimestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&starttimestamp_)) + sizeof(version_));
}

TraceLocation::~TraceLocation() {
  // @@protoc_insertion_point(destructor:internal.pt.TraceLocation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TraceLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TraceLocation::ArenaDtor(void* object) {
  TraceLocation* _this = reinterpret_cast< TraceLocation* >(object);
  (void)_this;
}
void TraceLocation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TraceLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TraceLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:internal.pt.TraceLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmpty();
  address_.ClearToEmpty();
  ::memset(&starttimestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&starttimestamp_)) + sizeof(version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "internal.pt.TraceLocation.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "internal.pt.TraceLocation.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 startTimestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          starttimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 endTimestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          endtimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TraceLocation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:internal.pt.TraceLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "internal.pt.TraceLocation.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // string address = 3;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "internal.pt.TraceLocation.address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_address(), target);
  }

  // uint64 startTimestamp = 5;
  if (this->starttimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_starttimestamp(), target);
  }

  // uint64 endTimestamp = 6;
  if (this->endtimestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_endtimestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:internal.pt.TraceLocation)
  return target;
}

size_t TraceLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:internal.pt.TraceLocation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string address = 3;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint64 startTimestamp = 5;
  if (this->starttimestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_starttimestamp());
  }

  // uint64 endTimestamp = 6;
  if (this->endtimestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_endtimestamp());
  }

  // uint32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceLocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:internal.pt.TraceLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const TraceLocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TraceLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:internal.pt.TraceLocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:internal.pt.TraceLocation)
    MergeFrom(*source);
  }
}

void TraceLocation::MergeFrom(const TraceLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:internal.pt.TraceLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.starttimestamp() != 0) {
    _internal_set_starttimestamp(from._internal_starttimestamp());
  }
  if (from.endtimestamp() != 0) {
    _internal_set_endtimestamp(from._internal_endtimestamp());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void TraceLocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:internal.pt.TraceLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraceLocation::CopyFrom(const TraceLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:internal.pt.TraceLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceLocation::IsInitialized() const {
  return true;
}

void TraceLocation::InternalSwap(TraceLocation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceLocation, version_)
      + sizeof(TraceLocation::version_)
      - PROTOBUF_FIELD_OFFSET(TraceLocation, starttimestamp_)>(
          reinterpret_cast<char*>(&starttimestamp_),
          reinterpret_cast<char*>(&other->starttimestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceLocation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CrowdNotifierData::_Internal {
 public:
};

CrowdNotifierData::CrowdNotifierData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:internal.pt.CrowdNotifierData)
}
CrowdNotifierData::CrowdNotifierData(const CrowdNotifierData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  publickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_publickey().empty()) {
    publickey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_publickey(), 
      GetArena());
  }
  cryptographicseed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cryptographicseed().empty()) {
    cryptographicseed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cryptographicseed(), 
      GetArena());
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:internal.pt.CrowdNotifierData)
}

void CrowdNotifierData::SharedCtor() {
publickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cryptographicseed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
version_ = 0u;
}

CrowdNotifierData::~CrowdNotifierData() {
  // @@protoc_insertion_point(destructor:internal.pt.CrowdNotifierData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CrowdNotifierData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  publickey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cryptographicseed_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CrowdNotifierData::ArenaDtor(void* object) {
  CrowdNotifierData* _this = reinterpret_cast< CrowdNotifierData* >(object);
  (void)_this;
}
void CrowdNotifierData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CrowdNotifierData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CrowdNotifierData::Clear() {
// @@protoc_insertion_point(message_clear_start:internal.pt.CrowdNotifierData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publickey_.ClearToEmpty();
  cryptographicseed_.ClearToEmpty();
  version_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CrowdNotifierData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes publicKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_publickey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes cryptographicSeed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_cryptographicseed();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CrowdNotifierData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:internal.pt.CrowdNotifierData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // bytes publicKey = 2;
  if (this->publickey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_publickey(), target);
  }

  // bytes cryptographicSeed = 3;
  if (this->cryptographicseed().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_cryptographicseed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:internal.pt.CrowdNotifierData)
  return target;
}

size_t CrowdNotifierData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:internal.pt.CrowdNotifierData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes publicKey = 2;
  if (this->publickey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_publickey());
  }

  // bytes cryptographicSeed = 3;
  if (this->cryptographicseed().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cryptographicseed());
  }

  // uint32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CrowdNotifierData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:internal.pt.CrowdNotifierData)
  GOOGLE_DCHECK_NE(&from, this);
  const CrowdNotifierData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CrowdNotifierData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:internal.pt.CrowdNotifierData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:internal.pt.CrowdNotifierData)
    MergeFrom(*source);
  }
}

void CrowdNotifierData::MergeFrom(const CrowdNotifierData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:internal.pt.CrowdNotifierData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.publickey().size() > 0) {
    _internal_set_publickey(from._internal_publickey());
  }
  if (from.cryptographicseed().size() > 0) {
    _internal_set_cryptographicseed(from._internal_cryptographicseed());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void CrowdNotifierData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:internal.pt.CrowdNotifierData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrowdNotifierData::CopyFrom(const CrowdNotifierData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:internal.pt.CrowdNotifierData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrowdNotifierData::IsInitialized() const {
  return true;
}

void CrowdNotifierData::InternalSwap(CrowdNotifierData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  publickey_.Swap(&other->publickey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cryptographicseed_.Swap(&other->cryptographicseed_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CrowdNotifierData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CWALocationData::_Internal {
 public:
};

CWALocationData::CWALocationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:internal.pt.CWALocationData)
}
CWALocationData::CWALocationData(const CWALocationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&defaultcheckinlengthinminutes_) -
    reinterpret_cast<char*>(&version_)) + sizeof(defaultcheckinlengthinminutes_));
  // @@protoc_insertion_point(copy_constructor:internal.pt.CWALocationData)
}

void CWALocationData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&defaultcheckinlengthinminutes_) -
    reinterpret_cast<char*>(&version_)) + sizeof(defaultcheckinlengthinminutes_));
}

CWALocationData::~CWALocationData() {
  // @@protoc_insertion_point(destructor:internal.pt.CWALocationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CWALocationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CWALocationData::ArenaDtor(void* object) {
  CWALocationData* _this = reinterpret_cast< CWALocationData* >(object);
  (void)_this;
}
void CWALocationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CWALocationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CWALocationData::Clear() {
// @@protoc_insertion_point(message_clear_start:internal.pt.CWALocationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&defaultcheckinlengthinminutes_) -
      reinterpret_cast<char*>(&version_)) + sizeof(defaultcheckinlengthinminutes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CWALocationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .internal.pt.TraceLocationType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::internal::pt::TraceLocationType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 defaultCheckInLengthInMinutes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          defaultcheckinlengthinminutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CWALocationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:internal.pt.CWALocationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // .internal.pt.TraceLocationType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // uint32 defaultCheckInLengthInMinutes = 3;
  if (this->defaultcheckinlengthinminutes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_defaultcheckinlengthinminutes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:internal.pt.CWALocationData)
  return target;
}

size_t CWALocationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:internal.pt.CWALocationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  // .internal.pt.TraceLocationType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 defaultCheckInLengthInMinutes = 3;
  if (this->defaultcheckinlengthinminutes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_defaultcheckinlengthinminutes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CWALocationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:internal.pt.CWALocationData)
  GOOGLE_DCHECK_NE(&from, this);
  const CWALocationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CWALocationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:internal.pt.CWALocationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:internal.pt.CWALocationData)
    MergeFrom(*source);
  }
}

void CWALocationData::MergeFrom(const CWALocationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:internal.pt.CWALocationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.defaultcheckinlengthinminutes() != 0) {
    _internal_set_defaultcheckinlengthinminutes(from._internal_defaultcheckinlengthinminutes());
  }
}

void CWALocationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:internal.pt.CWALocationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWALocationData::CopyFrom(const CWALocationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:internal.pt.CWALocationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWALocationData::IsInitialized() const {
  return true;
}

void CWALocationData::InternalSwap(CWALocationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CWALocationData, defaultcheckinlengthinminutes_)
      + sizeof(CWALocationData::defaultcheckinlengthinminutes_)
      - PROTOBUF_FIELD_OFFSET(CWALocationData, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CWALocationData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pt
}  // namespace internal
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::internal::pt::QRCodePayload* Arena::CreateMaybeMessage< ::internal::pt::QRCodePayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::internal::pt::QRCodePayload >(arena);
}
template<> PROTOBUF_NOINLINE ::internal::pt::TraceLocation* Arena::CreateMaybeMessage< ::internal::pt::TraceLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::internal::pt::TraceLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::internal::pt::CrowdNotifierData* Arena::CreateMaybeMessage< ::internal::pt::CrowdNotifierData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::internal::pt::CrowdNotifierData >(arena);
}
template<> PROTOBUF_NOINLINE ::internal::pt::CWALocationData* Arena::CreateMaybeMessage< ::internal::pt::CWALocationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::internal::pt::CWALocationData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
